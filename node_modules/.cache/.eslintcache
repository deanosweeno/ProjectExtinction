[{"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\index.js":"1","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\App.js":"2","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Map.js":"3","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\SplashComponent\\Splash.js":"4","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Pairs.js":"5","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Mcq.js":"6","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\PairsComponents\\SingleCard.js":"7","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\PairsComponents\\PopupPairs.js":"8","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\McqComponent\\PopupMcq.js":"9"},{"size":486,"mtime":1670624804720,"results":"10","hashOfConfig":"11"},{"size":567,"mtime":1670847478823,"results":"12","hashOfConfig":"11"},{"size":16916,"mtime":1670849442086,"results":"13","hashOfConfig":"11"},{"size":191,"mtime":1670847478847,"results":"14","hashOfConfig":"11"},{"size":4197,"mtime":1670849442094,"results":"15","hashOfConfig":"11"},{"size":6443,"mtime":1670849442828,"results":"16","hashOfConfig":"11"},{"size":618,"mtime":1670847478845,"results":"17","hashOfConfig":"11"},{"size":404,"mtime":1670849442102,"results":"18","hashOfConfig":"11"},{"size":348,"mtime":1670847478838,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qayaoc",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\index.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\App.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Map.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\SplashComponent\\Splash.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Pairs.js",["48"],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\Mcq.js",["49"],[],"import React, { useState, useEffect} from 'react';\r\nimport './McqComponent/Mcq.css';\r\nimport PopupMcq from './McqComponent/PopupMcq'; \r\nconst animalNames = [\"crocodile\", \"condor\", \"dolphin\", \"rhino\", \"panda\", \"Leopard\", \"whale\", \"PBear\", \"peng\", \"mink\", \"jaguar\"];\r\nfunction Mcq() {\r\n  //properties\r\n  const[data,setData] = useState()\r\n\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      const response = await fetch(\"https://raw.githubusercontent.com/deanosweeno/ProjectExtinction/main/public/animalAPI.json\");\r\n      const data = await response.json();\r\n      setData(data.animalList)\r\n    };\r\n    loadData();\r\n  },[])\r\n<<<<<<< Updated upstream\r\n  const array = [data]\r\n  console.log(array[0])\r\n=======\r\n  //console.log()\r\n  const test = [{whale}, {croc}, {mink}, {jaguar}, {condor}, {dolph}, {panda}, {peng}, {rhino}, {leopard}, {PBears}, {crocodile}];\r\n  console.log((test[11]))\r\n>>>>>>> Stashed changes\r\n  const [buttonPopup, setButtonPopup] = useState(false);\r\n  const [showFinalResults, setFinalResults] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n<<<<<<< Updated upstream\r\n  const questions = [\r\n    {\r\n      text: \"What colour is a lion?\",\r\n      options: [\r\n        { id: 0, text: \"Red\", isCorrect: false },\r\n        { id: 1, text: \"Gold\", isCorrect: true },\r\n        { id: 2, text: \"Green\", isCorrect: false },\r\n        { id: 3, text: \"Black\", isCorrect: false }\r\n=======\r\n  const questions1 = [\r\n    { \r\n      text: \"What type of area does a crocodile prefer?\",\r\n      options: [\r\n        { id: 0, text: croc.habitat, isCorrect: true },\r\n        { id: 1, text: peng.habitat, isCorrect: false },\r\n        { id: 2, text: jaguar.habitat, isCorrect: false },\r\n        { id: 3, text: whale, isCorrect: false }\r\n      ]\r\n    },\r\n    { \r\n      text: \"What does a panda eat?\",\r\n      options: [\r\n        { id: 0, text: croc.food, isCorrect: false },\r\n        { id: 1, text: panda.food, isCorrect: true },\r\n        { id: 2, text: mink.food, isCorrect: false },\r\n        { id: 3, text: condor.food, isCorrect: false }\r\n      ]\r\n    },\r\n    { \r\n      text: \"Where does a mink live?\",\r\n      options: [\r\n        { id: 0, text: croc.region, isCorrect: false },\r\n        { id: 1, text: panda.region, isCorrect: false },\r\n        { id: 2, text: mink.region, isCorrect: true },\r\n        { id: 3, text: peng.region, isCorrect: false }\r\n      ]\r\n    }\r\n  ];\r\n  const questions2 = [\r\n    { \r\n      text: \"What type of area does a condor prefer?\",\r\n      options: [\r\n        { id: 0, text: PBears.habitat, isCorrect: false },\r\n        { id: 1, text: peng.habitat, isCorrect: false },\r\n        { id: 2, text: condor.habitat, isCorrect: true },\r\n        { id: 3, text: dolph.habitat, isCorrect: false }\r\n      ]\r\n    },\r\n    {\r\n      text: \"What does a penguin eat?\",\r\n      options: [\r\n        { id: 0, text: PBears.food, isCorrect: false },\r\n        { id: 1, text: peng.food, isCorrect: true },\r\n        { id: 2, text: condor.food, isCorrect: false },\r\n        { id: 3, text: dolph.food, food: false }\r\n      ]\r\n    },\r\n    {\r\n      text: \"Where does a Polar Bear live?\",\r\n      options: [\r\n        { id: 0, text: PBears.region, isCorrect: true },\r\n        { id: 1, text: peng.region, isCorrect: false },\r\n        { id: 2, text: condor.region, isCorrect: false },\r\n        { id: 3, text: dolph.region, food: false }\r\n>>>>>>> Stashed changes\r\n      ]\r\n    },\r\n    {\r\n      text: \"What colour is a Beetle?\",\r\n      options: [\r\n        { id: 0, text: \"Red\", isCorrect: false },\r\n        { id: 1, text: \"Gold\", isCorrect: false },\r\n        { id: 2, text: \"Green\", isCorrect: false },\r\n        { id: 3, text: \"Black\", isCorrect: true }\r\n      ]\r\n    },\r\n    {\r\n      text: \"What colour is a Flamingo?\",\r\n      options: [\r\n        { id: 0, text: \"Red\", isCorrect: false },\r\n        { id: 1, text: \"Gold\", isCorrect: false },\r\n        { id: 2, text: \"Pink\", isCorrect: true },\r\n        { id: 3, text: \"Black\", isCorrect: false }\r\n      ]\r\n    },\r\n    {\r\n      text: \"What colour is a Elephant?\",\r\n      options: [\r\n        { id: 0, text: \"Red\", isCorrect: false },\r\n        { id: 1, text: \"Gold\", isCorrect: false },\r\n        { id: 2, text: \"Green\", isCorrect: false },\r\n        { id: 3, text: \"Grey\", isCorrect: true }\r\n      ]\r\n    }\r\n    \r\n  ];\r\n<<<<<<< Updated upstream\r\n=======\r\n  const questions3 = [\r\n    { \r\n      text: \"What type of area does a condor prefer?\",\r\n      options: [\r\n        { id: 0, text: jaguar.habitat, isCorrect: false },\r\n        { id: 1, text: peng.habitat, isCorrect: false },\r\n        { id: 2, text: condor.habitat, isCorrect: true },\r\n        { id: 3, text: dolph.habitat, isCorrect: false }\r\n      ]\r\n    },\r\n  ]\r\n>>>>>>> Stashed changes\r\n\r\n  //helperFunction\r\n  const optionClicked = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setScore(score + 1);\r\n    }\r\n    if (currentQuestion + 1 < questions.length) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      setFinalResults(true);\r\n    }\r\n  };\r\n  const restartGame = () => {\r\n    setScore(0);\r\n    setCurrentQuestion(0);\r\n    setFinalResults(false);\r\n  };\r\n  return (\r\n    //section headers\r\n    <div class=\"Cards\">\r\n      <button class = \"OPMCQ\" onClick={() => setButtonPopup(true)}>Open Mcq</button>   \r\n      <PopupMcq trigger={buttonPopup} setTrigger={setButtonPopup}>\r\n      {showFinalResults ? (\r\n        /*Final results card*/\r\n        <div class=\"final-results\">\r\n          <h1>Final Result</h1>\r\n          <h2>\r\n            {\" \"}\r\n            {score} out of {questions.length} correct - (\r\n            {(score / questions.length) * 100}%)\r\n          </h2>\r\n          <button onClick={() => restartGame()}>Restart Game?</button>\r\n        </div>\r\n      ) : (\r\n        /* Question Card*/\r\n        <div class=\"question-card\">\r\n          <h2>\r\n            Question {currentQuestion + 1} out of {questions.length}\r\n          </h2>\r\n          <h3 class=\"question-text\">{questions[currentQuestion].text}</h3>\r\n\r\n          <ul>\r\n            {questions[currentQuestion].options.map((option) => {\r\n              return (\r\n                <li\r\n                  onClick={() => optionClicked(option.isCorrect)}\r\n                  key={option.id}\r\n                >\r\n                  {option.text}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      </PopupMcq>\r\n    </div>\r\n  );\r\n}\r\nexport default Mcq;\r\n\r\n","C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\PairsComponents\\SingleCard.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\PairsComponents\\PopupPairs.js",[],[],"C:\\Users\\alex_\\Documents\\GitHub\\ProjectExtinction\\src\\McqComponent\\PopupMcq.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":87,"column":32,"nodeType":"52","endLine":87,"endColumn":34,"suggestions":"53"},{"ruleId":null,"fatal":true,"severity":2,"message":"54","line":18,"column":3},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'shuffle'. Either include it or remove the dependency array.","ArrayExpression",["55"],"Parsing error: Unexpected token (18:3)",{"desc":"56","fix":"57"},"Update the dependencies array to be: [shuffle]",{"range":"58","text":"59"},[3411,3413],"[shuffle]"]